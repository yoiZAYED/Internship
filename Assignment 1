
Code1 There is no error spotted as the correct output was produced
# def reverse_string(s):
#   reversed = ""
#   for i in range(len(s) - 1, -1, -1):
#     reversed += s[i]
#   return reversed
# def main():
#   input_string = "Hello, world!"
#   reversed_string = reverse_string(input_string)
#   print(f"Reversed string: {reversed_string}")
# if __name__ == "__main__":
#   main()

#Code2:
#Objective: To identify and fix errors in a Python program that validates user input.
def get_age():
  age = input("Please enter your age: ")
  if age.isnumeric() and age >= 18: #in this code we have an type error as we accepted a string and was comparing it with integer data type, which raised the error.  
                            #to correct this error we convert string type explicitly to integer data type using int(age) for converting age string to integer type.
    return int(age)
  else:
    return None
def main():
  age = get_age()
  if age:
    print(f"You are {age} years old and eligible.")
  else:
    print("Invalid input. You must be at least 18 years old.")
if __name__ == "__main__":
  main()


#Objective: To identify and fix errors in a Python program that reads and writes to a file.
#Code3:There is no error in this code, as it runs successfully as long as the text file is created else an error will be raised.
def read_and_write_file(filename):
  try:
    with open(filename, 'r') as file:
      content = file.read()
    with open(filename, 'w') as file:
      file.write(content.upper())
    print(f"File '{filename}' processed successfully.")
  except Exception as e:
    print(f"An error occurred: {str(e)}")
def main():
  filename = "sample.txt"
  read_and_write_file(filename)
if __name__ == "__main__":
  main()
#Code4:Indentation needs to be followed apart from that the following code runs smoothly.
# def merge_sort(arr):
#     if len(arr) <= 1:
#         return arr

#     mid = len(arr) // 2
#     left = arr[:mid]
#     right = arr[mid:]

#     # Recursively sort both halves
#     merge_sort(left)
#     merge_sort(right)

#     i = j = k = 0

#     # Merge the sorted halves
#     while i < len(left) and j < len(right):
#         if left[i] < right[j]:
#             arr[k] = left[i]
#             i += 1
#         else:
#             arr[k] = right[j]
#             j += 1
#         k += 1

#     # Copy any remaining elements of left and right (if any)
#     while i < len(left):
#         arr[k] = left[i]
#         i += 1
#         k += 1

#     while j < len(right):
#         arr[k] = right[j]
#         j += 1
#         k += 1

# # Example usage
# arr = [38, 27, 43, 3, 9, 82, 10,7,27]
# merge_sort(arr)
# print(f"The sorted array is: {arr}")
